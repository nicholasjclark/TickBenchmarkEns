#### Convert predictions to EFI forecast standards ####
# Load the latest predictions for each species
latest_ixodes <- list.files(path = 'Forecasts', 
                              pattern = '\\bixodes_predictions')[which.max(file.info(paste0('Forecasts/', 
                                                                                list.files(path = 'Forecasts', 
                                                                                           pattern = '\\bixodes_predictions')))$mtime)]
load(paste0('Forecasts/', latest_ixodes))

latest_amb <- list.files(path = 'Forecasts', 
                            pattern = '\\bamb_predictions')[which.max(file.info(paste0('Forecasts/', 
                                                                                       list.files(path = 'Forecasts', 
                                                                                                  pattern = '\\bamb_predictions')))$mtime)]
load(paste0('Forecasts/', latest_amb))

# Save the forecasts in the EFI specified .csv format
last_week_2019 <- 40
library(dplyr)
all_predictions <- ixodes_predictions %>%
  dplyr::full_join(amb_predictions)
all_predictions$forecast_issue_time <- Sys.Date()
all_predictions$forecast_iteration_id <- 1
all_predictions$forecast_project_id <- 'NJC_Ticks'

write.csv(all_predictions, 
          file = paste0('Forecasts/ticks-2019-',
                        stringr::str_pad(lubridate::month(as.character(MMWRweek::MMWRweek2Date(2019, last_week_2019 + 1))), 
                                         2, pad = 0),
                        '-',
                        stringr::str_pad(lubridate::day(as.character(MMWRweek::MMWRweek2Date(2019, last_week_2019 + 1))), 
                                         2, pad = 0),
                        '-',
                        'NJC_Ticks.csv'), 
          row.names = F, quote = F)

# Create metadata file and save
library(EML)
methods <- list(id="forecast", 
                methodStep = list(description = 
                                    list(markdown = paste(readLines('Metadata/methods.md'), 
                                                          collapse = "\n"))))
attributes <- tibble::tribble(
  ~attributeName,        ~attributeDefinition,               ~unit,           ~formatString,  ~numberType,    ~definition,
  "time",                 "time",                          "year",            "YYYY-MM-DD",  "numberType",     NA,
  "siteID",               "ID of NEON site",               "dimensionless",    NA,             NA,               "NEON site identifier",
  "plotID",               "ID of NEON plot",               "dimensionless",    NA,             NA,               "NEON plot identifier",
  "ensemble",             "index of ensemble member",      "dimensionless",    NA,            "integer",          NA,
  "forecast",          "flag whether a forecast or hindcast", NA,            NA,              "integer",       "flag whether a forecast or hindcast",
  "data_assimilation",    "flag whether time step included assimilation", "dimensionless",NA, "integer",         NA,
  "ixodes_scapularis",    "forecast larval abundance of I. scapularis","individuals",NA,       "real",           "forecast larval abundance of I. scapularis",
  "amblyomma_americanum",    "forecast larval abundance of A. americanum","individuals",NA,    "real",           "forecast larval abundance of A. americanum",
  "forecast_issue_time",  "time that forecast was created",  NA,               "YYYY-MM-DD",   NA,               NA,
  "forecast_iteration_id", "ID for specific forecast cycle", NA,               NA,             "integer",              "forecast id",
  "forecast_project_id",    "ID for forecasting project",     NA,               NA,             NA,              "project id"
)

attrList <- set_attributes(attributes, 
                           col_classes = c("Date", "character", "character", 
                                           "numeric", "numeric", "numeric",
                                           "numeric", "numeric", "Date",
                                           "numeric", "character"))

physical <- set_physical(paste0('Forecasts/ticks-2019-',
                                stringr::str_pad(lubridate::month(as.character(MMWRweek::MMWRweek2Date(2019, last_week_2019 + 1))), 
                                                 2, pad = 0),
                                '-',
                                stringr::str_pad(lubridate::day(as.character(MMWRweek::MMWRweek2Date(2019, last_week_2019 + 1))), 
                                                 2, pad = 0),
                                '-',
                                'NJC_Ticks.csv'))
dataTable <- eml$dataTable(
  entityName = paste0('Forecasts/ticks-2019-',
                      lubridate::month(as.character(MMWRweek::MMWRweek2Date(2019, last_week_2019 + 1))),
                      '-',
                      lubridate::day(as.character(MMWRweek::MMWRweek2Date(2019, last_week_2019 + 1))),
                      '-',
                      'NJC_Ticks.csv'),
  entityDescription = "NEON tick abundance EFI forecast challenge - NJC_Ticks",
  physical = physical,
  attributeList = attrList)

me <- list(individualName = list(givenName = "Nicholas", 
                                 surName = "Clark"),
           electronicMailAddress = "n.clark@uq.edu.au",
           id = "https://orcid.org/0000-0001-7131-3301")

coverage <- 
  EML::set_coverage(begin = min(all_predictions$time), 
               end = max(all_predictions$time),
               sci_names = c('Ixodes scapularis', 'Amblyomma americanum'),
               geographicDescription = "North American NEON tick survey sites")

keywordSet <- list(
  list(
    keywordThesaurus = "EFI controlled vocabulary",
    keyword = list("forecast",
                   "ixodes",
                   "amblyomma",
                   "exponential smoothing",
                   "multivariate",
                   "timeseries")
  ))

dataset = eml$dataset(
  title = "NEON tick abundance EFI forecast challenge - NJC_Ticks",
  creator = me,
  contact = list(references="https://orcid.org/0000-0001-7131-3301"),
  pubDate = Sys.Date(),
  intellectualRights = "https://data.neonscience.org.",
  abstract =  "A vector exponential smoothing forecast of NEON tick abundances that jointly considers dynamic seasonality and level state processes and the influences of evapotranspiration and sampling effort. Hierarchical smoothing parameters and multivariate errors allow for dependencies among plots. Reconciliation of temporal hierarchies is used to identify both local and long-term trends.",
  dataTable = dataTable,
  keywordSet = keywordSet,
  coverage = coverage,
  methods = methods
)

my_eml <- eml$eml(dataset = dataset,
                  packageId = "NJC_Ticks",  
                  system = "uuid"
)

EML::write_eml(my_eml,paste0('Forecasts/ticks-2019-',
                             stringr::str_pad(lubridate::month(as.character(MMWRweek::MMWRweek2Date(2019, last_week_2019 + 1))), 
                                              2, pad = 0),
                             '-',
                             stringr::str_pad(lubridate::day(as.character(MMWRweek::MMWRweek2Date(2019, last_week_2019 + 1))), 
                                              2, pad = 0),
                             '-',
                             'NJC_Ticks.xml'))

